 runtime: nodejs20  # Ou a versão mais recente suportada
 service: default # Ou um nome de serviço se você tiver múltiplos serviços
 instance_class: F1 # Escolha um tipo de instância (F1 é o mais básico/econômico)
 
 handlers:
   - url: /.*
     secure: always # Redireciona para HTTPS
     script: auto
 
 # Variáveis de ambiente
 env_variables:
   SESSION_SECRET: '@admin' # ATENÇÃO: Use um valor REAL e SEGURO em produção!
   NODE_ENV: 'production'
   # Variáveis para conexão com o Google Cloud SQL (MariaDB)
   # Substitua pelos seus valores reais
   DB_USER: 'root'
   DB_HOST: '127.0.0.1'
   DB_PORT: '3306'
   DB_PASSWORD: '@admin' # Considere usar o Secret Manager para senhas em produção
   DB_NAME: 'espelho'
   # O DB_SOCKET_PATH é construído automaticamente pelo App Engine quando cloud_sql_instances é configurado.
   # O formato é /cloudsql/PROJECT_ID:REGION:INSTANCE_ID
   # Você pode definir explicitamente se precisar, mas geralmente não é necessário se beta_settings estiver correto.
   # DB_SOCKET_PATH: '/cloudsql/SEU_PROJECT_ID:SUA_REGIAO:SUA_INSTANCIA_ID'
   # DB_CONNECTION_LIMIT: '5' # Opcional, se o seu database.js usar essa variável
 
 # Configuração para Google Cloud SQL
 # Substitua SEU_PROJECT_ID:SUA_REGIAO:SUA_INSTANCIA_ID pela string de conexão da sua instância
 # Você pode encontrar essa string na página de visão geral da sua instância do Cloud SQL no Console do Google Cloud.
 beta_settings:
   cloud_sql_instances: "amoranimal2025: southamerica-east1-a:espelho" # Substitua "espelho2025" pelo nome da sua instância do Cloud SQL
   
 
 # Configurações de escalonamento (opcional, mas bom para começar)
 automatic_scaling:
   min_instances: 0 # Pode ir a 0 para economizar custos quando não há tráfego
   max_instances: 1 # Comece com 1 e ajuste conforme necessário
   target_cpu_utilization: 0.65
   # target_throughput_utilization: 0.65 # Descomente se preferir escalar por taxa de transferência
   # min_pending_latency: 30ms # Descomente e ajuste se quiser escalar por latência
   # max_pending_latency: automatic
   # max_concurrent_requests: 50 # Ajuste conforme a capacidade da sua aplicação
 
 # Se você tiver arquivos estáticos que o App Engine deve servir diretamente (ex: CSS, JS, imagens da UI)
 # handlers:
   - url: /static
     static_dir: static # Supondo que você tenha uma pasta 'static' na raiz do projeto
   - url: /uploads # Se você quiser servir uploads diretamente (CUIDADO: veja notas sobre persistência)
     static_dir: static/uploads # Supondo que seus uploads estejam em static/uploads
   - url: /.*
     secure: always
     script: auto
 